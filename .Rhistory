# Read in the env file data to get API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")
# Read in The Lens API R code
source(here("R","lens_api_function.R"))
library(tidyverse)
library(here)
library(janitor)
# Read in the env file data to get API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")
# Read in The Lens API R code
source(here("R","lens_api_function.R"))
# Packages for data wrangling
library(tidyverse)
library(here)
library(janitor)
library(glue)
# Packages for calling Lens API
library(httr)
library(rjson)
sessionInfo()
# Packages for data wrangling
library(tidyverse)
library(here)
library(janitor)
library(glue)
# Packages for calling Lens API
library(httr)
library(rjson)
# Read in the env file data to get API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")
# Read in The Lens API R code
source(here("R","lens_api_function.R"))
# Read in pharma and uni queries and combine both
pharma_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="pharma_queries_agg_all", skip=4) %>%
clean_names() %>%
# Remove rows that dont have query string (these are just heading rows)
filter(!is.na(query_string))
uni_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="uni_queries_agg_all", skip=4) %>%
clean_names() %>%
filter(!is.na(query_string))
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- bind_rows(pharma_agg_data, uni_agg_data) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Packages for data wrangling
library(tidyverse)
library(here)
library(janitor)
library(glue)
# Packages for calling Lens API
library(httr)
library(rjson)
# Read in the env file data to get API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")
# Read in The Lens API R code
source(here("R","lens_api_function.R"))
# Read in pharma and uni queries and combine both
pharma_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="pharma_queries_agg_all", skip=4) %>%
clean_names() %>%
# Remove rows that dont have query string (these are just heading rows)
filter(!is.na(query_string))
uni_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="uni_queries_agg_all", skip=4) %>%
clean_names() %>%
filter(!is.na(query_string))
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- bind_rows(pharma_agg_data, uni_agg_data) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Save data as csv file
write_csv(combined_agg_data, here("output", "pharma-uni-queries-agg-api-results.csv"))
# Read in pharma and uni queries
oa_colour_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_agg_pharma_uni_oa_color") %>%
clean_names() %>%
filter(!is.na(query_string)) %>%
rowwise() %>%
# Get the oa_colours firtst
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_color_agg", token) %>% pluck('aggregations', 'pubtype'))) %>%
unnest_wider(new_cols) %>%
# unnest again to flatten OA color category lists
unnest(c(gold, hybrid, bronze, green, unknown)) %>%
mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>%
rowwise() %>%
# Get OA status
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
write_csv(oa_colour_data, here("output", "pharma-uni-queries-oa-status-agg-api-results.csv"))
trend_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_pharma_uni_over_time") %>%
clean_names() %>%
filter(!is.na(query_string))
# Get the OA colours and OA numbers over time for primary and secondary search (i.e. medical search) for uni and pharma
oa_plus_oa_colour_trend <- trend_data %>%
filter(analysis_type == "oa_status_plus_colour") %>%
rowwise() %>%
# Get the oa_colours firtst
mutate(new_cols = list(aggregration_query(query_string, "oa_color_over_time", token) %>% pluck('aggregations', 'date_histo') %>%
enframe() %>%
unnest_wider(value) %>%
unnest_wider(`oa-colour`) %>%
rename(year = name, total = doc_count))) %>%
unnest(new_cols) %>%
unnest(c(gold, hybrid, bronze, green, unknown)) %>%
mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>%
rowwise() %>%
mutate(oa = sum(c(gold, hybrid, bronze, green, unknown)),
`non-oa` = total - oa)
write_csv(oa_plus_oa_colour_trend, here("output", "pharma-uni-queries-oa-plus-colour-trend-api-results.csv"))
# Get OA numbers over time  for individual therapy areas (for pharma and universities)
oa_TA_trend <- trend_data %>%
filter(analysis_type == "oa_therapy_area") %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string, "oa_color_over_time", token) %>% pluck('aggregations', 'date_histo') %>%
enframe() %>%
unnest_wider(value) %>%
unnest_wider(`oa-colour`) %>%
rename(year = name, total = doc_count))
) %>%
unnest(new_cols) %>%
unnest(c(gold, hybrid, bronze, green, unknown)) %>%
# In some cases, there are no counts for some categories
mutate(across(c(gold, hybrid, bronze, green, unknown), as.character)) %>%
mutate(across(c(gold, hybrid, bronze, green, unknown), str_replace, 'NULL', '0')) %>%
mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>%
rowwise() %>%
mutate(oa = sum(c(gold, hybrid, bronze, green, unknown)),
`non-oa` = total - oa)
write_csv(oa_TA_trend, here("output", "pharma-uni-queries-oa-plus-colour-trend-therapy-areas-api-results.csv"))
# Report the total publication counts for each of the therapy areas across 10 years
oa_TA_counts <- oa_TA_trend %>%
group_by(query_name) %>%
summarise(total_all_years = sum(total))
write_csv(oa_TA_counts, here("output", "pharma-uni-queries-therapy-areas-api-total-counts-results.csv"))
# we will use the same trend data query again but this time we will use the 'journal_oa_status_agg' aggregration string
top_journal_by_TA  <- trend_data %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "journal_oa_status_agg", token) %>% pluck('aggregations', 'journal') %>%
enframe() %>%
unnest_wider(value) %>%
unnest_wider(open_access_status))) %>%
unnest(new_cols)
View(trend_data)
View(oa_plus_oa_colour_trend)
View(trend_data)
# we will use the same trend data query again but this time we will use the 'journal_oa_status_agg' aggregration string
top_journal_by_TA  <- trend_data %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "journal_oa_status_agg", token) %>% pluck('aggregations', 'journal') %>%
enframe() %>%
unnest_wider(value) %>%
unnest_wider(open_access_status))) %>%
unnest(new_cols)
write_csv(top_journal_by_TA, here("output", "pharma-uni-queries-therapy-areas-api-top-journal-counts-results.csv"))
top_journal_by_TA_12_24m  <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_TA_pharma_uni_12_24m") %>%
clean_names() %>%
# Remove rows that dont have query string (these are just heading rows)
filter(!is.na(query_string)) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "journal_oa_status_agg", token) %>% pluck('aggregations', 'journal') %>%
enframe() %>%
unnest_wider(value) %>%
unnest_wider(open_access_status))) %>%
unnest(new_cols)
write_csv(top_journal_by_TA_12_24m, here("output", "pharma-uni-queries-therapy-areas-api-top-journal-counts-12-24m-results.csv"))
# Get total counts for each therapy area for primary analysis timeframe
ta_agg_data_12_24m <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_TA_pharma_uni_12_24m") %>%
clean_names() %>%
filter(!is.na(query_string)) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
write_csv(ta_agg_data_12_24m, here("output", "pharma-uni-queries-therapy-areas-api-counts-12-24m-results.csv"))
pharma_queries <- readxl::read_xlsx('Query doc.xlsx', sheet = 'pharma_ror_ids') %>%
clean_names() %>%
# Create a new column where we combine names and other names of institutions together if they are present.
mutate(combined_institution_names = case_when(is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\"'),
!is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\" OR \"{str_to_lower(other_names)}\"'),
TRUE ~ other_names)) %>%
# If we provide a manual override for our query (in cases where we want to add 'NOT' or add 'child organizations'), we use that text instead of the original institution query
mutate(combined_institution_names = coalesce(custom_query_override, combined_institution_names)) %>%
# This is the query for total publication count
mutate(query_total=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y')) %>%
# This is the query for medicine only
mutate(query_medicine=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y AND field_of_study: ("Medicine" OR "Internal medicine" OR "Pharmacology")'))
# Perform the same processing with the university list
uni_queries <- readxl::read_xlsx('Query doc.xlsx', sheet = 'uni_ror_ids') %>%
clean_names() %>%
mutate(combined_institution_names = case_when(is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\"'),
!is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\" OR \"{str_to_lower(other_names)}\"'),
TRUE ~ other_names)) %>%
mutate(combined_institution_names = coalesce(custom_query_override, combined_institution_names)) %>%
mutate(query_total=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y')) %>%
mutate(query_medicine=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y AND field_of_study: ("Medicine" OR "Internal medicine" OR "Pharmacology")'))
# Combine data and create two csv files: one for total counts query and the other for medical only counts query
combined_data <- bind_rows(pharma_queries,uni_queries)
combined_data_total <- combined_data %>%
select(-notes, -combined_institution_names, -query_medicine)
combined_data_total <- combined_data %>%
select(-combined_institution_names, -query_medicine)
combined_data_medical <- combined_data %>%
select( -combined_institution_names, -query_total)
# Export as csv files (just to be safe)
write_csv(combined_data_total, here("output", "pharma-uni-single-insitution-queries-total-count.csv"))
write_csv(combined_data_medical, here("output", "pharma-uni-single-insitution-queries-medical-count.csv"))
# Read in the query data for total (medical +non-medical) counts and get aggregrated counts by passing the 'query_total' column as the query string
total_counts_queries <- read_csv(here("output", "pharma-uni-single-insitution-queries-total-count.csv")) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_total, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Read in the query data for medical counts and get aggregrated counts by passing the 'query_total' column as the query string
medical_counts_queries <- read_csv(here("output", "pharma-uni-single-insitution-queries-medical-count.csv")) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_medicine, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Write as csv files
write_csv(total_counts_queries, here("output", "pharma-uni-single-insitution-total-counts.csv"))
write_csv(medical_counts_queries, here("output", "pharma-uni-single-insitution-medical-counts.csv"))
# Read in the queries from above and change the timeframe using str_replace
combined_data_total_12_24m <- read_csv(here("output", "pharma-uni-single-insitution-queries-total-count.csv")) %>%
rowwise() %>%
mutate(query_total = str_replace(query_total, "date_published>=now-10y", "date_published>=now-24M AND date_published<=now-12M")) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_total, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Read in the queries from above and change the timeframe using str_replace
combined_data_total_12_24m <- read_csv(here("output", "pharma-uni-single-insitution-queries-total-count.csv")) %>%
rowwise() %>%
mutate(query_total = str_replace(query_total, "date_published>=now-10y", "date_published>=now-24M AND date_published<=now-12M")) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_total, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
combined_data_medical_12_24m <- read_csv(here("output", "pharma-uni-single-insitution-queries-medical-count.csv")) %>%
rowwise() %>%
mutate(query_medicine = str_replace(query_medicine, "date_published>=now-10y", "date_published>=now-24M AND date_published<=now-12M")) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_medicine, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Write as csv files
write_csv(combined_data_total_12_24m, here("output", "pharma-uni-single-insitution-total-count-12-24m.csv"))
write_csv(combined_data_medical_12_24m, here("output", "pharma-uni-single-insitution-medical-count-12-24m.csv"))
sessionInfo()
sessionInfo()
library(tidyverse)
library(here)
library(janitor)
library(scales)
library(stringr)
library(ggstream)
library(trend)
sessionInfo()
# Packages for data wrangling
library(tidyverse)
library(here)
library(janitor)
library(glue)
# Packages for calling Lens API
library(httr)
library(rjson)
# Read in the env file containing the API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")
# Read in The Lens API R code
source(here("R","lens_api_function.R"))
# Read in pharma and uni queries and combine both
pharma_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="pharma_queries_agg_all", skip=4) %>%
clean_names() %>%
# Remove rows that dont have query string (these are just heading rows)
filter(!is.na(query_string))
uni_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="uni_queries_agg_all", skip=4) %>%
clean_names() %>%
filter(!is.na(query_string))
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- bind_rows(pharma_agg_data, uni_agg_data) %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
View(pharma_agg_data)
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- pharma_agg_data %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
View(combined_agg_data)
query_string <- "(author.affiliation.name:(\"pfizer\" OR \"astrazeneca\" OR \"eli lilly\" OR \"merck\" OR \"emd serono\" OR \"msd\" OR \"merck sharp & dohme\" OR \"bristol myers squibb\" OR \"novartis\" OR \"roche\" OR \"hoffmann-la roche\" OR \"genentech\" OR \"johnson & johnson\" OR \"janssen\" OR \"biosense webster\" OR \"glaxosmithkline\" OR \"gsk\" OR \"abbvie\" OR \"sanofi\" OR \"sanofi-aventis\" OR \"gilead sciences\" OR \"takeda\" OR \"boehringer ingelheim\" OR \"myokardia\" OR \"amgen\" OR \"applied molecular genetics\" OR \"bayer\" OR \"vertex pharmaceuticals\" OR \"regeneron\" OR \"novo nordisk\" OR \"biogen\" OR \"biogen idec\" OR \"daiichi sankyo\" OR \"astellas pharma\" OR \"asuterasu seiyaku kabushiki-gaisha\" OR \"otsuka\" OR \"otsuka seiyaku kabushiki-gaisha\" OR \"astex pharmaceuticals\" OR \"ucb\" OR \"union chimique belge\" OR \"moderna\" OR \"eisai\" OR \"ezai kabushiki-gaisha\" OR \"ea pharma\" OR \"csl\" OR \"zlb behring\" OR \"jiangsu hengrui medicine\" OR \"teva pharmaceuticals\" OR \"sumitomo dainippon pharma\" OR \"dainippon sumitomo seiyaku kabushiki-gaisha\" OR \"fresenius\" OR \"fresenius se & co. kgaa\" OR \"viatris\" OR \"kyowa kirin\" OR \"kyowa hakko kirin\" OR \"ipsen\" OR \"jazz pharmaceuticals\" OR \"azur pharma\" OR \"sino biopharm\" OR \"bausch health companies\" OR \"valeant pharmaceuticals\" OR \"cspc pharmaceutical group\" OR \"galapagos\" OR \"galapagos genomics\" NOT \"La Roche College\") OR author.affiliation.ror_id_lineage:(\"01xdqrp08\" OR \"00by1q217\" OR \"04b2dty93\" OR \"02891sr49\" OR \"03qd7mz70\" OR \"00gtmwv55\" OR \"02f9zrr09\" OR \"04r9x1a08\" OR \"01qat3289\" OR \"01xsqw823\" OR \"02g5p4n58\" OR \"02n6c9837\" OR \"056546b03\" OR \"04hjbmv12\" OR \"00q32j219\" OR \"03g03ge92\" OR \"04hmn8g73\" OR \"00anb1726\" OR \"02f51rf24\" OR \"0435rc536\" OR \"02jqkb192\" OR \"027y26122\" OR \"01cjash87\" OR \"013k5y296\" OR \"01n029866\" OR \"01xm4wg91\" OR \"04vvh7p27\" OR \"044tc0x05\" OR \"04ayvvz32\" OR \"01wfv3m53\" OR \"04sapgw72\" OR \"01v376g59\" OR \"01g1gvr46\" OR \"000wej815\" OR \"00d801g55\" OR \"055mhsv54\" OR \"0086q4c12\" OR \"01zgpn844\" OR \"016mq8947\" OR \"04e4j5d46\")) AND publication_type:\"journal article\" AND date_published>now-12M AND field_of_study: (\"Medicine\" OR \"Internal medicine\" OR \"Pharmacology\")"
aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE)
query_string <- '(author.affiliation.name:("pfizer" OR "astrazeneca" OR "eli lilly" OR "merck" OR "emd serono" OR "msd" OR "merck sharp & dohme" OR "bristol myers squibb" OR "novartis" OR "roche" OR "hoffmann-la roche" OR "genentech" OR "johnson & johnson" OR "janssen" OR "biosense webster" OR "glaxosmithkline" OR "gsk" OR "abbvie" OR "sanofi" OR "sanofi-aventis" OR "gilead sciences" OR "takeda" OR "boehringer ingelheim" OR "myokardia" OR "amgen" OR "applied molecular genetics" OR "bayer" OR "vertex pharmaceuticals" OR "regeneron" OR "novo nordisk" OR "biogen" OR "biogen idec" OR "daiichi sankyo" OR "astellas pharma" OR "asuterasu seiyaku kabushiki-gaisha" OR "otsuka" OR "otsuka seiyaku kabushiki-gaisha" OR "astex pharmaceuticals" OR "ucb" OR "union chimique belge" OR "moderna" OR "eisai" OR "ezai kabushiki-gaisha" OR "ea pharma" OR "csl" OR "zlb behring" OR "jiangsu hengrui medicine" OR "teva pharmaceuticals" OR "sumitomo dainippon pharma" OR "dainippon sumitomo seiyaku kabushiki-gaisha" OR "fresenius" OR "fresenius se & co. kgaa" OR "viatris" OR "kyowa kirin" OR "kyowa hakko kirin" OR "ipsen" OR "jazz pharmaceuticals" OR "azur pharma" OR "sino biopharm" OR "bausch health companies" OR "valeant pharmaceuticals" OR "cspc pharmaceutical group" OR "galapagos" OR "galapagos genomics" NOT "La Roche College") OR author.affiliation.ror_id_lineage:("01xdqrp08" OR "00by1q217" OR "04b2dty93" OR "02891sr49" OR "03qd7mz70" OR "00gtmwv55" OR "02f9zrr09" OR "04r9x1a08" OR "01qat3289" OR "01xsqw823" OR "02g5p4n58" OR "02n6c9837" OR "056546b03" OR "04hjbmv12" OR "00q32j219" OR "03g03ge92" OR "04hmn8g73" OR "00anb1726" OR "02f51rf24" OR "0435rc536" OR "02jqkb192" OR "027y26122" OR "01cjash87" OR "013k5y296" OR "01n029866" OR "01xm4wg91" OR "04vvh7p27" OR "044tc0x05" OR "04ayvvz32" OR "01wfv3m53" OR "04sapgw72" OR "01v376g59" OR "01g1gvr46" OR "000wej815" OR "00d801g55" OR "055mhsv54" OR "0086q4c12" OR "01zgpn844" OR "016mq8947" OR "04e4j5d46")) AND publication_type:"journal article" AND date_published>now-12M AND field_of_study: ("Medicine" OR "Internal medicine" OR "Pharmacology")'
aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE)
View(pharma_agg_data)
pharma_agg_data[13]
pharma_agg_data[:13]
pharma_agg_data[13,]
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- pharma_agg_data[13,] %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE) %>% pluck('aggregations', 'open_access_status')))
View(combined_agg_data)
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- pharma_agg_data[13,] %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- pharma_agg_data %>%
rowwise() %>%
mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token,show_query_string=TRUE) %>% pluck('aggregations', 'open_access_status'))) %>%
unnest_wider(new_cols) %>%
rowwise() %>%
mutate(total = sum(`non-oa`, open_access))
View(combined_agg_data)
# Package names
packages <- c("tidyverse", "here", "janitor", "scales", "stringr", "ggstream", "trend")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Package names
packages <- c("tidyverse", "here", "janitor", "glue", "httr", "rjson")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Calculate percentge of OA, OA colour and OA therapy area trends over time and calculate slopes
all_pub_data <- read_csv("output/pharma-uni-queries-oa-plus-colour-trend-api-results.csv")
# Package names
packages <- c("tidyverse", "here", "janitor", "scales", "stringr", "ggstream", "trend")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Calculate percentge of OA, OA colour and OA therapy area trends over time and calculate slopes
all_pub_data <- read_csv("output/pharma-uni-queries-oa-plus-colour-trend-api-results.csv")
library(tidyverse)
library(here)
library(janitor)
library(scales)
library(stringr)
library(ggstream)
library(trend)
# Calculate percentge of OA, OA colour and OA therapy area trends over time and calculate slopes
all_pub_data <- read_csv("output/pharma-uni-queries-oa-plus-colour-trend-api-results.csv")
# Percentage OA trends
oa_trend_prc <- all_pub_data %>%
rowwise() %>%
mutate(percentage_oa_of_total = (oa/total)*100)
# Calculate percentge of OA, OA colour and OA therapy area trends over time and calculate slopes
all_pub_data <- read_csv("output/pharma-uni-queries-oa-plus-colour-trend-api-results.csv")
# Percentage OA trends
oa_trend_prc <- all_pub_data %>%
rowwise() %>%
mutate(percentage_oa_of_total = (oa/total)*100) %>%
group_by(group)
View(oa_trend_prc)
write_csv(oa_trend_prc, trend.csv)
write_csv(oa_trend_prc, "trend.csv")
