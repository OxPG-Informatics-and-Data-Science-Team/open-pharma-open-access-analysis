---
title: "1.Getting count data via API"
format: html
editor: visual
---

```{r}
# Packages for data wrangling
library(tidyverse)
library(here)
library(janitor)
library(glue)
# Packages for calling Lens API
library(httr)
library(rjson)
```

## Load The Lens aggregation API key and helper function

Get an API key from The Lens and save the key under the 'LENS_KEY' variable in an .env file. More information on the API can be found here: https://docs.api.lens.org/aggregations-beta.html

Then, run code below to load in custom function for the calling The Lens API. The helper function accepts four arguments (query_string, aggregration type, show_query_string and API token) and returns a dataframe of results. 'query_string' refers to the Lens query string and is taken from the various excel file columns. There are 5 aggregation types in the helper function that provide different counts (license, oa status or oa colour as an aggregrated count or counts per year for plotting time series):

-   "license_agg" - returns the different license type counts (up to 20 license categories)

-   "oa_status_agg" - returns the oa status counts for the query

-   "oa_color_agg" - returns the oa colour counts for the query

-   "oa_color_over_time" - returns the oa colour counts for each year across the specified time period

-   "oa_status_over_time"- returns the oa status counts for each year across the specified time period

-   "journal_oa_status_agg" - returns the top 20 journals for that query split by oa access status

The 'token' argument accepts the API token from The Lens. The 'show_query_string' accepts a TRUE/FALSE argument and can be used to print the query string when running the script.

```{r}
# Read in the env file containing the API token. API token need to be requested from The Lens
readRenviron(".env")
token <- Sys.getenv("LENS_KEY")

# Read in The Lens API R code
source(here("R","lens_api_function.R"))
```

## Aggregated total counts for pharma and uni

Run queries listed in the 'pharma_queries_agg_all' and 'uni_queries_agg_all' tabs in the Query doc.xlsx file.

```{r}
# Read in pharma and uni queries and combine both
pharma_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="pharma_queries_agg_all", skip=4) %>%
  clean_names() %>%
  # Remove rows that dont have query string (these are just heading rows)
  filter(!is.na(query_string))

uni_agg_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="uni_queries_agg_all", skip=4) %>%
  clean_names() %>%
  filter(!is.na(query_string))

# Using the pharma and uni queries, get oa and non-oa counts by passing the 'query_string' column as the query string. Then sum these two to get total counts
combined_agg_data <- bind_rows(pharma_agg_data, uni_agg_data) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))

# Save data as csv file
write_csv(combined_agg_data, here("output", "pharma-uni-queries-agg-api-results.csv"))
```

## Aggregated OA colour and OA status counts

Run queries listed in the 'queries_agg_pharma_uni_oa_color' tab in the Query doc.xlsx file.

```{r}
# Read in pharma and uni queries
oa_colour_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_agg_pharma_uni_oa_color") %>%
  clean_names() %>%
  filter(!is.na(query_string)) %>%
  rowwise() %>%
  # Get the oa_colours
  mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_color_agg", token) %>% pluck('aggregations', 'pubtype'))) %>%
  unnest_wider(new_cols) %>%
  unnest(c(gold, hybrid, bronze, green, unknown)) %>%
    mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>%  
  rowwise() %>%
  # Get OA status
  mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))

write_csv(oa_colour_data, here("output", "pharma-uni-queries-oa-status-agg-api-results.csv"))
```

## Trends over time counts for OA colour for university and pharma and individual therapy areas

Run queries listed in the 'queries_pharma_uni_over_time' tab in the Query doc.xlsx file.

```{r}
trend_data <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_pharma_uni_over_time") %>%
  clean_names() %>%
  filter(!is.na(query_string))


# Get the OA colours and OA numbers over time for primary and secondary search (i.e. medical search) for uni and pharma
oa_plus_oa_colour_trend <- trend_data %>%
  filter(analysis_type == "oa_status_plus_colour") %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string, "oa_color_over_time", token) %>% pluck('aggregations', 'date_histo') %>%
    enframe() %>%
    unnest_wider(value) %>%
    unnest_wider(`oa-colour`) %>% 
    rename(year = name, total = doc_count))) %>%
  unnest(new_cols) %>%
  unnest(c(gold, hybrid, bronze, green, unknown)) %>%
  mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>% 
  rowwise() %>%
  mutate(oa = sum(c(gold, hybrid, bronze, green, unknown)),
         `non-oa` = total - oa)

write_csv(oa_plus_oa_colour_trend, here("output", "pharma-uni-queries-oa-plus-colour-trend-api-results.csv"))


# Get OA numbers over time  for individual therapy areas (for pharma and universities)
oa_TA_trend <- trend_data %>%
  filter(analysis_type == "oa_therapy_area") %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string, "oa_color_over_time", token) %>% pluck('aggregations', 'date_histo') %>%
    enframe() %>%
    unnest_wider(value) %>%
    unnest_wider(`oa-colour`) %>% 
    rename(year = name, total = doc_count))
  ) %>%
  unnest(new_cols) %>%
  unnest(c(gold, hybrid, bronze, green, unknown)) %>%  
  # In some cases, there are no counts for some categories
  mutate(across(c(gold, hybrid, bronze, green, unknown), as.character)) %>%
  mutate(across(c(gold, hybrid, bronze, green, unknown), str_replace, 'NULL', '0')) %>%
  mutate(across(c(gold, hybrid, bronze, green, unknown), as.numeric)) %>%
  rowwise() %>%
  mutate(oa = sum(c(gold, hybrid, bronze, green, unknown)),
         `non-oa` = total - oa)

write_csv(oa_TA_trend, here("output", "pharma-uni-queries-oa-plus-colour-trend-therapy-areas-api-results.csv"))

# Report the total publication counts for each of the therapy areas across 10 years
oa_TA_counts <- oa_TA_trend %>%
  group_by(query_name) %>%
  summarise(total_all_years = sum(total))

write_csv(oa_TA_counts, here("output", "pharma-uni-queries-therapy-areas-api-total-counts-results.csv"))
```

## Top journals OA counts (10 years)

Get the top journals for each of the therapy areas (10 year timeframe).

```{r}
# we will use the same trend data query again but this time we will use the 'journal_oa_status_agg' aggregration string
top_journal_by_TA  <- trend_data %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_string, "journal_oa_status_agg", token) %>% pluck('aggregations', 'journal') %>%
    enframe() %>%
    unnest_wider(value) %>%
    unnest_wider(open_access_status))) %>%
  unnest(new_cols)

write_csv(top_journal_by_TA, here("output", "pharma-uni-queries-therapy-areas-api-top-journal-counts-results.csv"))
```

## Top journals and aggregated counts - primary analysis (12-24 months)

Journal and aggregated counts but with 12-24 months timeframe. Run queries listed in the 'queries_TA_pharma_uni_12_24m' tab in the 'Query doc.xlsx' file.

```{r}
top_journal_by_TA_12_24m  <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_TA_pharma_uni_12_24m") %>%
  clean_names() %>%
  # Remove rows that dont have query string (these are just heading rows)
  filter(!is.na(query_string)) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_string, "journal_oa_status_agg", token) %>% pluck('aggregations', 'journal') %>%
    enframe() %>%
    unnest_wider(value) %>%
    unnest_wider(open_access_status))) %>%
  unnest(new_cols)

write_csv(top_journal_by_TA_12_24m, here("output", "pharma-uni-queries-therapy-areas-api-top-journal-counts-12-24m-results.csv"))

# Get total counts for each therapy area for primary analysis timeframe
ta_agg_data_12_24m <- readxl::read_xlsx(here("Query doc.xlsx"), sheet ="queries_TA_pharma_uni_12_24m") %>%
  clean_names() %>%
  filter(!is.na(query_string)) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_string, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))

write_csv(ta_agg_data_12_24m, here("output", "pharma-uni-queries-therapy-areas-api-counts-12-24m-results.csv"))

```

## Individual institutions aggregated counts across 10 year and 12-24 month timeframe

In the following sections, we use the API to get aggregated counts for each pharma and university institution individually

### Preprocess data

Read in the ROR IDs, institution names etc from pharma companies and universities from the 'pharma_ror_ids' and 'uni_ror_ids' tabs in the Query doc.xlsx file.

```{r}
pharma_queries <- readxl::read_xlsx('Query doc.xlsx', sheet = 'pharma_ror_ids') %>%
  clean_names() %>%
  # Create a new column where we combine names and other names of institutions together if they are present.
  mutate(combined_institution_names = case_when(is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\"'),
         !is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\" OR \"{str_to_lower(other_names)}\"'),
         TRUE ~ other_names)) %>%
  # If we provide a manual override for our query (in cases where we want to add 'NOT' or add 'child organizations'), we use that text instead of the original institution query
  mutate(combined_institution_names = coalesce(custom_query_override, combined_institution_names)) %>%
  # This is the query for total publication count
  mutate(query_total=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y')) %>%
  # This is the query for medicine only
  mutate(query_medicine=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y AND field_of_study: ("Medicine" OR "Internal medicine" OR "Pharmacology")'))


# Perform the same processing with the university list
uni_queries <- readxl::read_xlsx('Query doc.xlsx', sheet = 'uni_ror_ids') %>%
  clean_names() %>%
  mutate(combined_institution_names = case_when(is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\"'),
         !is.na(other_names) ~ glue('\"{str_to_lower(institution_name)}\" OR \"{str_to_lower(other_names)}\"'),
         TRUE ~ other_names)) %>%
  mutate(combined_institution_names = coalesce(custom_query_override, combined_institution_names)) %>%
  mutate(query_total=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y')) %>%
  mutate(query_medicine=glue('(author.affiliation.name:({combined_institution_names}) OR author.affiliation.ror_id_lineage:({ror_id_with_quotes})) AND publication_type:"journal article" AND date_published>=now-10y AND field_of_study: ("Medicine" OR "Internal medicine" OR "Pharmacology")'))

# Combine data and create two csv files: one for total counts query and the other for medical only counts query
combined_data <- bind_rows(pharma_queries,uni_queries)

combined_data_total <- combined_data %>%
  select(-combined_institution_names, -query_medicine)

combined_data_medical <- combined_data %>%
  select( -combined_institution_names, -query_total)

# Export as csv files (just to be safe)
write_csv(combined_data_total, here("output", "pharma-uni-single-insitution-queries-total-count.csv"))
write_csv(combined_data_medical, here("output", "pharma-uni-single-insitution-queries-medical-count.csv"))
```

### Aggregated OA status counts (10 year timeframe)

Read in queries from the 'pharma-uni-single-insitution-queries-total-count.csv' and 'pharma-uni-single-insitution-queries-medical-count.csv' files and get OA status counts for total and medical data across 10 years

```{r}
# Read in the query data for total (medical +non-medical) counts and get aggregrated counts by passing the 'query_total' column as the query string 
total_counts_queries <- read_csv(here("output", "pharma-uni-single-insitution-queries-total-count.csv")) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_total, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))


# Read in the query data for medical counts and get aggregrated counts by passing the 'query_total' column as the query string 
medical_counts_queries <- read_csv(here("output", "pharma-uni-single-insitution-queries-medical-count.csv")) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_medicine, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))

# Write as csv files
write_csv(total_counts_queries, here("output", "pharma-uni-single-insitution-total-counts.csv"))
write_csv(medical_counts_queries, here("output", "pharma-uni-single-insitution-medical-counts.csv"))
```

### Aggregated OA status counts (12-24 months)

Same as above but changing query timeframe to 12-24 months

```{r}
# Read in the queries from above and change the timeframe using str_replace
combined_data_total_12_24m <- read_csv(here("output", "pharma-uni-single-insitution-queries-total-count.csv")) %>%
  rowwise() %>%
  mutate(query_total = str_replace(query_total, "date_published>=now-10y", "date_published>=now-24M AND date_published<=now-12M")) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_total, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))
  
combined_data_medical_12_24m <- read_csv(here("output", "pharma-uni-single-insitution-queries-medical-count.csv")) %>%
  rowwise() %>%
  mutate(query_medicine = str_replace(query_medicine, "date_published>=now-10y", "date_published>=now-24M AND date_published<=now-12M")) %>%
  rowwise() %>%
  mutate(new_cols = list(aggregration_query(query_string = query_medicine, "oa_status_agg", token) %>% pluck('aggregations', 'open_access_status'))) %>%
  unnest_wider(new_cols) %>%
  rowwise() %>%
  mutate(total = sum(`non-oa`, open_access))

# Write as csv files
write_csv(combined_data_total_12_24m, here("output", "pharma-uni-single-insitution-total-count-12-24m.csv"))
write_csv(combined_data_medical_12_24m, here("output", "pharma-uni-single-insitution-medical-count-12-24m.csv"))
```

## Session info

```{r}
sessionInfo()
```
